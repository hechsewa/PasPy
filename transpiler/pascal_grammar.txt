grammar pascal;

program
    : PROGRAM interface ; block DOT
    ;

interface
    : identifier LPAREN identifierList RPAREN SEMICOLON
    ;

identifier
    : IDENT
    ;

identifierList
    :
    ;

block
    : (constsDeclare | typesDeclare | varsDeclare | procFuncDeclare)* compoundStatement
    ;

//const block
constsDeclare
    : CONST (constDefine SEMICOLON) +
    ;

constDefine
    : identifier EQUAL constant
    ;

constChar
    : CHR LPAREN unsignedInt RPAREN
    ;

constant
    : unsingedNum | sign unsignedNum | identifier | sign identifier | string | constChar
    ;

//types block
typesDeclare
    : TYPE (typeDefine SEMICOLON) +
    ;

typeDefine
    : identifier EQUAL (type | functionType | procedureType)
    ;

functionType
    : FUNCTION (parameterList)? COLON resultType
    ;

procedureType
    : PROCEDURE (parameterList)?
    ;

type
    : simpleType
    | structuredType
    ;

simpleType
    : LPAREN identifierList RPAREN
    | stringType
    ;

structuredType
    : arrayType
    | setType
    ;

stringType
    : STRING LBRACK (identifier | unsignedNum) RBRACK
    ;

arrayType
    : ARRAY LBRACK typeList RBRACK OF type
    | ARRAY LBRACK2 typeList RBRACK2 OF type
    ;

typeList
    : simpleType (COMMA simpleType)*
    ;

//sets
setType
    : SET OF simpleType
    ;

//variables block
varsDeclare
    : VAR varsDefine (SEMICOLON varsDefine)* SEMICOLON
    ;

varsDefine
    : identifierList COLON type
    ;

//procedures and functions
procFuncDeclare
    : procFuncDefine SEMICOLON
    ;

procFuncDefine
    : procedure | function
    ;

procedure
    : PROCEDURE identifier (parameterList)? SEMICOLON block
    ;

parameterList
    : LPAREN parameterSection (SEMICOLON parameterSection)* RPAREN
    ;

parameterSection
    : parameters | VAR parameters | FUNCTION parameters | PROCEDURE parameters
    ;

parameters
    : identifierList COLON typeIdentifier
    ;

identifierList
    : identifier (COMMA identifier)*
    ;

constList
    : constant (COMMA constant)*
    ;

function
    : FUNCTION identifier (parameterList)? COLON resultType SEMICOLON block
    ;

resultType
    : typeIdentifier
    ;

//statements
statement   
    : assignmentStatement
    | procedureStatement
    | emptyStatement
    ;

assignmentStatement
    : variable ASSIGN expression
    ;

variable
    : (identifier) (LBRACK expression (COMMA expression)* RBRACK | LBRACK2 expression (COMMA expression)* RBRACK2 | DOT identifier)*
    ;

expression
    : simpleExpression (relationalOp expression)?
    ;

relationalOp
    : EQUAL
    | NOT_EQUAL
    | LT
    | LE
    | GE
    | GT
    | IN
    ;

additiveOp
    : PLUS
    | MINUS
    | OR
    ;

multiplicativeOp
    : STAR
    | SLASH
    | AND
    ;

simpleExpression
    : term (additiveOp simpleExpression)?
    ;

term
    : sign? factor (multiplicativeOp term)?
    ;

factor
    : variable
    | LPAREN expression RPAREN
    | functionCall
    | unsignedConst
    | NOT factor
    | bool
    ;

unsignedConst
    : unsignedNum
    | constChar
    | string
    | NIL
    ;

functionCall
    : identifier LPAREN param (COMMA param)* RPAREN
    ;

param
    : expression (':' expression)*

procedureStatement
    : identifier (LPAREN param (COMMA param)* RPAREN)?
    ;

emptyStatement
    :
    ;

empty
    :
    /* empty */
    ;

structuredStatement
    : compoundStatement
    | ifStatement
    | loopStatement
    ;

compoundStatement
    : BEGIN statements END
    ;

statements
    : statement (SEMICOLON statement)*
    ;

ifStatement
    : IF expression THEN statement (: ELSE statement)?
    ;

loopStatement
    : whileStatement
    | forStatement
    ;

whileStatement
    : WHILE expression DO statement
    ;

forStatement
    : FOR identifier ASSIGN forList DO statement 
    ;

forList
    : expression (TO | DOWNTO) expression
    ;

//numbers and signs
unsignedNum
    : unsignedInt | unsignedReal
    ;

unsignedInt
    : NUM_INT
    ;

unsignedReal
    : NUM_REAL
    ;

sign
    : PLUS | MINUS
    ;

bool
    : TRUE | FALSE
    ;

string
    : STR_LITERAL
    ;
